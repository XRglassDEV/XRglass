name: Sanitize Codex PR comments

on:
  issue_comment:
    types: [created, edited]
  pull_request:
    types: [opened, synchronize, edited]
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to sanitize (leave blank to clean all open PRs)"
        required: false
        default: ""

permissions:
  issues: write
  pull-requests: write

jobs:
  sweep:
    if: github.event.issue.pull_request != null || github.event_name != 'issue_comment'
    runs-on: ubuntu-latest
    steps:
      - name: Remove Codex task links from comments
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            const input = (core.getInput('pr_number') || '').trim();
            let prNumbers = [];
            if (input) prNumbers = [Number(input)];
            else if (context.payload.pull_request) prNumbers = [context.payload.pull_request.number];
            else if (context.payload.issue && context.payload.issue.pull_request) prNumbers = [context.payload.issue.number];
            else {
              const prs = await github.paginate(github.rest.pulls.list, { owner, repo, state: 'open', per_page: 100 });
              prNumbers = prs.map(p => p.number);
            }

            const patterns = [
              /https?:\/\/(?:www\.)?chatgpt\.com\/codex\/tasks\/\S+/ig,
              /https?:\/\/(?:www\.)?chat\.openai\.com\/codex\/tasks\/\S+/ig
            ];

            for (const number of prNumbers) {
              const comments = await github.paginate(github.rest.issues.listComments, { owner, repo, issue_number: number, per_page: 100 });
              for (const c of comments) {
                const original = c.body || "";
                const lines = original.split(/\r?\n/);
                const kept = lines.filter(line => !patterns.some(rx => rx.test(line)));
                const sanitized = kept.join("\n").replace(/\n{3,}/g, "\n\n").trim();
                if (sanitized !== original) {
                  await github.rest.issues.updateComment({ owner, repo, comment_id: c.id, body: sanitized });
                  core.info(`Sanitized comment ${c.id} on PR #${number}`);
                }
              }
            }
