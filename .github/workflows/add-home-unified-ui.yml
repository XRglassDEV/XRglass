name: Add unified Home UI (Auto Push)

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-home:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Git identity
        run: |
          git config user.name "MiaX"
          git config user.email "miasatox@protonmail.com"

      - name: Ensure folders
        run: mkdir -p app

      - name: Write unified Home page
        shell: bash
        run: |
          cat > app/page.tsx <<'TSX'
          "use client";
          import React, { useMemo, useState } from "react";

          type Mode = "auto" | "wallet" | "project";

          const isLikelyXRP = (s:string) => /^r[1-9A-HJ-NP-Za-km-z]{24,35}$/.test(s.trim());
          const looksLikeDomain = (s:string) => /\./.test(s) && !/\s/.test(s);

          export default function Home() {
            const [mode, setMode] = useState<Mode>("auto");
            const [q, setQ] = useState("");
            const [loading, setLoading] = useState(false);
            const [res, setRes] = useState<any>(null);
            const [err, setErr] = useState<string | null>(null);
            const [debug, setDebug] = useState(false);

            const detected = useMemo<Mode>(() => {
              if (mode !== "auto") return mode;
              const t = q.trim();
              if (isLikelyXRP(t)) return "wallet";
              if (looksLikeDomain(t)) return "project";
              return "wallet";
            }, [q, mode]);

            const doScan = async () => {
              setErr(null); setRes(null); setLoading(true);
              try {
                const input = q.trim();
                let url = "";
                if (detected === "wallet") {
                  url = `/api/scan/wallet?address=${encodeURIComponent(input)}`;
                } else {
                  url = `/api/scan/domain?url=${encodeURIComponent(input)}`;
                }
                const r = await fetch(url);
                const j = await r.json();
                if (!r.ok || j?.status === "error") throw new Error(j?.message || "Scan failed");
                setRes(j);
              } catch (e:any) {
                setErr(e?.message || "Unexpected error");
              } finally {
                setLoading(false);
              }
            };

            const badgeClass = (v:string) =>
              v==="red" ? "bg-red-600" : v==="orange" ? "bg-orange-500" : "bg-green-600";

            return (
              <main className="min-h-screen px-4 py-10 md:py-16 bg-transparent">
                <div className="max-w-3xl mx-auto">
                  <h1 className="text-3xl md:text-4xl font-extrabold mb-6">
                    XRglass — <span className="text-teal-400">scan XRP wallets &amp; projects</span>
                  </h1>
                  <p className="text-sm text-gray-400 mb-6">
                    Paste a wallet or website. We’ll check common risk signals and show a simple verdict you can trust.
                  </p>

                  {/* Tabs */}
                  <div className="inline-flex rounded-lg overflow-hidden border border-gray-700 mb-4">
                    {(["auto","wallet","project"] as Mode[]).map(m => (
                      <button
                        key={m}
                        onClick={() => setMode(m)}
                        className={`px-4 py-2 text-sm ${mode===m ? "bg-gray-900" : "bg-gray-800 hover:bg-gray-700"}`}
                      >
                        {m[0].toUpperCase()+m.slice(1)}
                      </button>
                    ))}
                  </div>
                  <span className="ml-3 text-xs text-gray-500">
                    Detected: {detected === "wallet" ? "Wallet address" : "Project / Website"}
                  </span>

                  {/* Input */}
                  <div className="mt-3 flex gap-2">
                    <input
                      className="flex-1 px-3 py-2 rounded border border-gray-700 bg-gray-900 outline-none"
                      placeholder={detected==="wallet" ? "rXXXXXXXXXXXXXXXXXXXXXXXXXXXX" : "example.com"}
                      value={q}
                      onChange={(e)=>setQ(e.target.value)}
                    />
                    <button
                      onClick={doScan}
                      disabled={loading || !q.trim()}
                      className="px-4 py-2 rounded bg-cyan-500 text-black font-semibold disabled:opacity-50"
                    >
                      {loading ? "Scanning..." : "Start Scan"}
                    </button>
                  </div>

                  {/* Toggle debug */}
                  <div className="mt-2 text-xs text-gray-500 flex items-center gap-2">
                    <label className="inline-flex items-center gap-2 cursor-pointer">
                      <input type="checkbox" checked={debug} onChange={()=>setDebug(v=>!v)} />
                      Debug {debug ? "ON" : "OFF"}
                    </label>
                  </div>

                  {/* Result */}
                  <div className="mt-6">
                    {err && (
                      <div className="p-4 rounded border border-red-700 bg-red-900/20 text-red-200">
                        <div className="font-semibold mb-1">We couldn’t complete the check</div>
                        <div className="text-sm">{err}</div>
                        <div className="text-xs opacity-70 mt-1">Tip: check your internet and try again.</div>
                      </div>
                    )}

                    {res && res.status === "ok" && (
                      <div className="p-4 rounded border border-gray-700 bg-gray-900">
                        {/* verdict header */}
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-3">
                            <span className={`text-white text-xs px-2 py-1 rounded ${badgeClass(res.score || res.verdict)}`}>
                              {(res.score || res.verdict || "SAFE").toUpperCase()}
                            </span>
                            {typeof res.scoreValue !== "undefined" && (
                              <span className="text-xs text-gray-400">Score: {res.scoreValue}</span>
                            )}
                          </div>
                          <div className="text-xs text-gray-500">
                            {detected==="wallet" ? "Wallet" : "Project"} scan
                          </div>
                        </div>

                        {/* summary */}
                        <div className="mt-3 text-sm text-gray-200">
                          {res.summary || "Result summary not available."}
                        </div>

                        {/* signals */}
                        <div className="mt-4">
                          <div className="text-sm font-semibold mb-2">Signals</div>
                          <ul className="list-disc pl-5 text-sm text-gray-300">
                            {(res.signals || []).map((s:any)=>(
                              <li key={s.id}>
                                <b>{s.label}</b> — <i>{s.severity}</i>{s.evidence?`: ${s.evidence}`:""}
                              </li>
                            ))}
                          </ul>
                        </div>

                        {debug && (
                          <pre className="mt-4 text-xs text-gray-400 overflow-auto max-h-64">
                            {JSON.stringify(res, null, 2)}
                          </pre>
                        )}
                      </div>
                    )}
                  </div>

                  {/* Footer note */}
                  <div className="mt-6 text-xs text-gray-500">
                    Beta heuristics only — always double-check before sending funds.
                  </div>
                </div>
              </main>
            );
          }
          TSX

      - name: Commit & push
        run: |
          git add app/page.tsx
          git commit -m "feat(ui): unified Home scanner (Auto/Wallet/Project) with result cards"
          git push origin main
